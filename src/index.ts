import { app, BrowserWindow, ipcMain } from "electron";
import SessionService from "./services/session-service";
import { Logger } from "./utilities/logger-utility";
import LiveviewService from "./services/liveview-service";
import path from "path";
import { WebSocketServer } from "ws";
import { CameraDriver } from "./drivers/camera-driver";
import FileService from "./services/file-service";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

if (require("electron-squirrel-startup")) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = async () => {
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
    },
  });

  await mainWindow.loadURL("http://localhost:5173/");

  mainWindow.webContents.openDevTools();
  return;
};

require("./handlers/media-handler.ts");
require("./handlers/session-handler.ts");
require("./handlers/camera-handler.ts");

app.whenReady().then(async () => {
  await createWindow();

  const wss = new WebSocketServer({ port: 8080 });
  const camera = new CameraDriver(FileService.captureDir);

  console.log("start liveview service");
  let i = 1;
  wss.on("connection", (ws) => {
    console.log("Connection establsihed");
    let buffer = Buffer.alloc(0);

    try {
      camera.start_liveview((chunk) => {
        let chunkes = Buffer.from(chunk);
        buffer = Buffer.concat([buffer, chunkes]);
        mainWindow.webContents.send("liveview", chunk);
      });
    } catch (error) {
      throw error;
    }

    wss.on("error", (err) => {
      console.error(err);
      throw err;
    });

    ws.on("close", async () => {
      await camera.stop_liveview();
    });
  });
});

ipcMain.on("main/reload", () => {
  Logger.info("reloading app");
  if (mainWindow) mainWindow.webContents.reload();
});

ipcMain.on("main/error", () => {
  Logger.error("app main process failed to reload, fatal error occured");
  if (mainWindow) mainWindow.loadFile("./renderers/fallback.html");
  SessionService.fallback();
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
